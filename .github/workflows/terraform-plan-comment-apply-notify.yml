name: "z Internal - Reusable terraform plan apply workflow"

on:
  workflow_call:
    inputs:
      TF_WORKING_DIR:
        required: true
        type: string
      RUNS_ON:
        required: false
        type: string
        default: "ubuntu-latest"
      TF_VERSION:
        required: false
        type: string
        default: "1.2.8"
      TF_CLI_ARGS:
        required: false
        type: string
        default: "-no-color"
      TF_CLI_ARGS_plan:
        required: false
        type: string
        default: "-lock-timeout=2m"
      TF_CLI_ARGS_apply:
        required: false
        type: string
        default: "-lock-timeout=2m"
      TF_SKIP_REFRESH:
        required: false
        type: boolean
        default: false
      TF_LOG:
        required: false
        type: string
    secrets:
      ARM_CLIENT_ID:
        required: true
      ARM_CLIENT_SECRET:
        required: true
      ARM_SUBSCRIPTION_ID:
        required: true
      ARM_TENANT_ID:
        required: true

env:
  ARM_CLIENT_ID: ${{ secrets.ARM_CLIENT_ID }}
  ARM_CLIENT_SECRET: ${{ secrets.ARM_CLIENT_SECRET }}
  ARM_SUBSCRIPTION_ID: ${{ secrets.ARM_SUBSCRIPTION_ID }}
  ARM_TENANT_ID: ${{ secrets.ARM_TENANT_ID }}
  TF_CLI_ARGS: ${{ inputs.TF_CLI_ARGS }}
  TF_CLI_ARGS_plan: ${{ inputs.TF_CLI_ARGS_plan }}
  TF_CLI_ARGS_apply: ${{ inputs.TF_CLI_ARGS_apply }}
  TF_LOG: ${{ inputs.TF_LOG }}
  TF_IN_AUTOMATION: "true"

jobs:
  plan-comment-apply-notify:
    runs-on: ${{ inputs.RUNS_ON }}
    steps:
      - name: "checkout pull request"
        if: github.event_name == 'pull_request'
        uses: actions/checkout@v3
      - name: "checkout master"
        # Checkout latest master when ref is master.
        # This will override checking out the revision that triggered the
        # workflow originally. Should mitigate re-runs of old workflows
        # potentially deleting terraform resources added later.
        if: github.ref == 'refs/heads/master'
        uses: actions/checkout@v3
        with:
          ref: master
      - name: "terraform setup"
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: ${{ inputs.TF_VERSION }}
          terraform_wrapper: false
      - name: "install tfcmt and github-comment"
        run: |
          curl \
            --silent \
            --show-error \
            --output tfcmt_linux_amd64.tar.gz \
            --location https://github.com/suzuki-shunsuke/tfcmt/releases/download/v3.2.2/tfcmt_linux_amd64.tar.gz

          curl \
            --silent \
            --output github-comment_linux_amd64.tar.gz \
            --location https://github.com/suzuki-shunsuke/github-comment/releases/download/v4.1.1/github-comment_4.1.1_linux_amd64.tar.gz

          mkdir .action-addons-bin
          echo "$PWD/.action-addons-bin" >> $GITHUB_PATH
          tar zxvf tfcmt_linux_amd64.tar.gz --directory .action-addons-bin
          tar zxvf github-comment_linux_amd64.tar.gz --directory .action-addons-bin
      - name: "store job url in environment"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "JOB_URL=$(gh api /repos/${{ github.repository }}/actions/runs/${{ github.run_id }}/jobs --jq '.jobs[0].html_url')" >> $GITHUB_ENV
      - name: "terraform fmt check"
        if: github.event_name == 'pull_request'
        run: terraform -chdir=${{ inputs.TF_WORKING_DIR }} fmt -check -diff
      - name: "terraform init"
        run: terraform -chdir=${{ inputs.TF_WORKING_DIR }} init
      - name: "terraform validate"
        run: terraform -chdir=${{ inputs.TF_WORKING_DIR }} validate
      - name: "terraform apply -refresh-only"
        if: github.ref == 'refs/heads/master' && inputs.TF_SKIP_REFRESH == false
        run: terraform -chdir=${{ inputs.TF_WORKING_DIR }} apply -refresh-only -auto-approve
      - name: "hide earlier pull request comments"
        if: github.event_name == 'pull_request'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          github-comment hide --condition 'Comment.HasMeta && Comment.Meta.Target == "${{ inputs.TF_WORKING_DIR }}"'
      - name: "terraform plan"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # wrap terraform plan with tfcmt to post plan as comment on PR/commit
          TF_EXIT_CODE=0
          tfcmt \
            -var "job_url:${{ env.JOB_URL }}" \
            -var "target:${{ inputs.TF_WORKING_DIR }}" \
            plan -- \
            terraform -chdir="${{ inputs.TF_WORKING_DIR }}" plan \
            -no-color -detailed-exitcode -out=plan.tfplan || TF_EXIT_CODE=$?

          if [ "$TF_EXIT_CODE" = "0" ]; then
            echo "TF_PLAN_HAS_CHANGES=false" >> $GITHUB_ENV
          elif [ "$TF_EXIT_CODE" = "2" ]; then
            echo "TF_PLAN_HAS_CHANGES=true" >> $GITHUB_ENV
          else
            echo "Failed with code $TF_EXIT_CODE"
            exit $TF_EXIT_CODE
          fi
      - name: "terraform apply"
        if: ${{ github.ref == 'refs/heads/master' && env.TF_PLAN_HAS_CHANGES == 'true' }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # wrap terraform apply with tfcmt to post result as comment on PR/commit
          tfcmt \
            -var "job_url:${{ env.JOB_URL }}" \
            -var "target:${{ inputs.TF_WORKING_DIR }}" \
            apply -- \
            terraform -chdir=${{ inputs.TF_WORKING_DIR }} apply -no-color plan.tfplan
